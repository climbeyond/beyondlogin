/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.model

import sh.ory.model.UpdateLoginFlowWithLookupSecretMethod
import sh.ory.model.UpdateLoginFlowWithOidcMethod
import sh.ory.model.UpdateLoginFlowWithPasswordMethod
import sh.ory.model.UpdateLoginFlowWithTotpMethod
import sh.ory.model.UpdateLoginFlowWithWebAuthnMethod

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param identifier Identifier is the email or username of the user trying to log in.
 * @param method Method should be set to \"lookup_secret\" when logging in using the lookup_secret strategy.
 * @param password The user's password.
 * @param provider The provider to register with
 * @param totpCode The TOTP code.
 * @param lookupSecret The lookup secret.
 * @param csrfToken Sending the anti-csrf token is only required for browser login flows.
 * @param passwordIdentifier Identifier is the email or username of the user trying to log in. This field is deprecated!
 * @param traits The identity traits. This is a placeholder for the registration flow.
 * @param upstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
 * @param webauthnLogin Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
 */


interface UpdateLoginFlowBody {

    /* Identifier is the email or username of the user trying to log in. */
    @SerialName(value = "identifier") @Required val identifier: kotlin.String
    /* Method should be set to \"lookup_secret\" when logging in using the lookup_secret strategy. */
    @SerialName(value = "method") @Required val method: kotlin.String
    /* The user's password. */
    @SerialName(value = "password") @Required val password: kotlin.String
    /* The provider to register with */
    @SerialName(value = "provider") @Required val provider: kotlin.String
    /* The TOTP code. */
    @SerialName(value = "totp_code") @Required val totpCode: kotlin.String
    /* The lookup secret. */
    @SerialName(value = "lookup_secret") @Required val lookupSecret: kotlin.String
    /* Sending the anti-csrf token is only required for browser login flows. */
    @SerialName(value = "csrf_token") val csrfToken: kotlin.String?
    /* Identifier is the email or username of the user trying to log in. This field is deprecated! */
    @SerialName(value = "password_identifier") val passwordIdentifier: kotlin.String?
    /* The identity traits. This is a placeholder for the registration flow. */
    @SerialName(value = "traits") val traits: kotlin.String?
    /* UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`. */
    @SerialName(value = "upstream_parameters") val upstreamParameters: kotlin.String?
    /* Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    @SerialName(value = "webauthn_login") val webauthnLogin: kotlin.String?
}

